name: Build and Release cutepomo

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger

env:
  APP_NAME: cutepomo

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Update version in Xcode project
      run: |
        xcrun agvtool new-marketing-version ${{ steps.version.outputs.VERSION }}
        
    - name: Install dependencies
      run: |
        # Install Sparkle for signing
        if ! command -v generate_keys &> /dev/null; then
          echo "Installing Sparkle..."
          brew install sparkle
        fi
        
    - name: Build app
      run: |
        echo "üî® Building $APP_NAME..."
        xcodebuild archive \
          -project $APP_NAME.xcodeproj \
          -scheme $APP_NAME \
          -configuration Release \
          -archivePath build/$APP_NAME.xcarchive \
          -destination "generic/platform=macOS" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Export app
      run: |
        echo "üì¶ Exporting $APP_NAME..."
        mkdir -p build/export
        cp -R build/$APP_NAME.xcarchive/Products/Applications/$APP_NAME.app build/export/
        
    - name: Create release archive
      run: |
        echo "üóúÔ∏è Creating release archive..."
        cd build/export
        zip -r ../$APP_NAME-v${{ steps.version.outputs.VERSION }}.zip $APP_NAME.app
        cd ../..
        
    - name: Get file size and signature
      id: release_info
      run: |
        FILE_SIZE=$(stat -f%z "build/$APP_NAME-v${{ steps.version.outputs.VERSION }}.zip")
        echo "FILE_SIZE=$FILE_SIZE" >> $GITHUB_OUTPUT
        
        # Sign the archive with Sparkle
        if [[ -n "${{ secrets.SPARKLE_PRIVATE_KEY }}" ]]; then
          echo "${{ secrets.SPARKLE_PRIVATE_KEY }}" > /tmp/sparkle_private_key
          SIGNATURE=$(sign_update "build/$APP_NAME-v${{ steps.version.outputs.VERSION }}.zip" /tmp/sparkle_private_key)
          echo "SIGNATURE=$SIGNATURE" >> $GITHUB_OUTPUT
          rm /tmp/sparkle_private_key
        else
          echo "‚ö†Ô∏è Warning: SPARKLE_PRIVATE_KEY not set, using placeholder"
          echo "SIGNATURE=PLACEHOLDER_SIGNATURE" >> $GITHUB_OUTPUT
        fi
        
    - name: Update appcast.xml
      run: |
        echo "üìù Updating appcast.xml..."
        
        # Get current date in RFC 2822 format
        PUBDATE=$(date -R)
        
        # Create new version entry
        cat > new_version.xml << EOF
        <item>
            <title>Version ${{ steps.version.outputs.VERSION }}</title>
            <description><![CDATA[
                <h2>Qu√© hay de nuevo en v${{ steps.version.outputs.VERSION }}:</h2>
                <ul>
                    <li>Nuevas caracter√≠sticas y mejoras</li>
                    <li>Correcci√≥n de errores</li>
                    <li>Optimizaciones de rendimiento</li>
                </ul>
            ]]></description>
            <pubDate>$PUBDATE</pubDate>
            <sparkle:version>${{ steps.version.outputs.VERSION }}</sparkle:version>
            <sparkle:shortVersionString>${{ steps.version.outputs.VERSION }}</sparkle:shortVersionString>
            <sparkle:minimumSystemVersion>15.0</sparkle:minimumSystemVersion>
            <enclosure 
                url="https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/$APP_NAME-v${{ steps.version.outputs.VERSION }}.zip" 
                length="${{ steps.release_info.outputs.FILE_SIZE }}" 
                type="application/octet-stream" 
                sparkle:edSignature="${{ steps.release_info.outputs.SIGNATURE }}" />
        </item>
        
        <!-- Previous version: -->
        EOF
        
        # Insert new version at the top of items in appcast.xml
        awk '
        /<channel>/ { in_channel = 1 }
        in_channel && /<!-- Versi√≥n actual -->/ {
            print
            getline
            while ((getline line < "new_version.xml") > 0) {
                print "        " line
            }
            close("new_version.xml")
            next
        }
        { print }
        ' appcast.xml > appcast_updated.xml
        
        mv appcast_updated.xml appcast.xml
        rm new_version.xml
        
                          # Update GitHub URL placeholder
         sed -i '' "s|https://github.com/suprastudy/CutePomo|https://github.com/${{ github.repository }}|g" appcast.xml
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: build/${{ env.APP_NAME }}-v${{ steps.version.outputs.VERSION }}.zip
        name: "cutepomo v${{ steps.version.outputs.VERSION }}"
        body: |
          ## üéâ Nueva versi√≥n de cutepomo!
          
          ### Qu√© hay de nuevo:
          - Mejoras en el rendimiento
          - Correcci√≥n de errores
          - Nuevas caracter√≠sticas
          
          ### Instalaci√≥n:
          1. Descarga el archivo ZIP
          2. Extr√°elo y arrastra cutepomo.app a tu carpeta Applications
          3. ¬°Disfruta!
          
          ### Actualizaciones autom√°ticas:
          Esta versi√≥n incluye actualizaciones autom√°ticas con Sparkle. Las futuras versiones se instalar√°n autom√°ticamente.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Commit updated appcast.xml
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add appcast.xml
        if git diff --staged --quiet; then
          echo "No changes to appcast.xml"
        else
          git commit -m "Update appcast.xml for v${{ steps.version.outputs.VERSION }}"
          git push origin main
        fi 